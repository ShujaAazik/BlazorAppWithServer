@page "/UserManagement"

<table>
    <tr>
        <td><h1>User 

        </h1></td>
    </tr>
    <tr>
        <td>
            <table>
                <tr>
                    <td><h2>Create User</h2></td>
                </tr>
                <tr>
                    <td>Name:</td>
                    <td><input type="text" @bind="userName"></td>
                </tr>
                <tr>
                    <td>Address:</td>
                    <td><input type="text" @bind="userAddress"></td>
                </tr>
                <tr>
                    <td>Email:</td>
                    <td><input type="text" @bind="userEmail"></td>
                </tr>
                 <tr>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
                <tr>
                    <td><button class="btn btn-primary" @onclick="AddUser">Add User</button></td>
                </tr>
            </table>
        </td>
        <td>
            <table>
                <tr>
                    <td><h2>Update User</h2></td>
                </tr>
                <tr>
                    <td>No:</td>
                    <td><input type="text" @bind="userID"></td>
                </tr>
                <tr>
                    <td>Name:</td>
                    <td><input type="text" @bind="userName"></td>
                </tr>
                <tr>
                    <td>Address:</td>
                    <td><input type="text" @bind="userAddress"></td>
                </tr>
                <tr>
                    <td>Email:</td>
                    <td><input type="text" @bind="userEmail"></td>
                </tr>
                <tr>
                    <td><button class="btn btn-primary">Update User</button></td>
                </tr>
            </table>
        </td>
    </tr>
    <tr>
        <td>
            <table>
                <tr>
                    <td><h2>Read User</h2></td>
                </tr>
                <tr>
                    <td>
                        @if (userList.Any())
                        {
                            <ul>
                                @foreach (var user in userList)
                                {
                                    <li>@user.ID &emsp; @user.Name &emsp; @user.Address &emsp; @user.Email</li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p>The List is Empty</p>
                        }
                    </td>
                </tr>
                <tr>
                    <td><button class="btn btn-primary">Read User</button></td>
                </tr>
            </table>
        </td>
    </tr>
    <tr>
        <td>
            <table>
                <tr>
                    <td><h2>Delete User</h2></td>
                </tr>
                <tr>
                    <td>No:</td>
                    <td><input type="text" @bind="userID"></td>
                </tr>
                <tr>
                    <td><button class="btn btn-primary">Delete User</button></td>
                </tr>
            </table>
        </td>
    </tr>
</table>




@code {

    private string userID { get; set; }
    private string userName { get; set; }
    private string userAddress { get; set; }
    private string userEmail { get; set; }

    private List<User> userList = new();

    private User user = new();

    private async Task AddUser()
    {
        if (userAddress != null && userEmail != null && userName != null)
        {
            await ApiCaller.AddUser(new User { ID = $"{GenerateId()}", Name = userName, Email = userEmail, Address = userAddress });

            ClearFields();
        }
    }

    private async Task ReadUser()
    {
        userList = (await ApiCaller.GetUsersAsync()).ToList();
    }

    private async Task UpdateUser()
    {
        
    }

    private async Task RemoveUser()
    {
        if (isIdExist(userID))
        {
            await ApiCaller.DeleteUser(userID);

            ClearFields();
        }
    }

    private string GenerateId()
    {
        return Enumerable.Range(1, int.MaxValue).Where(x => !isIdExist(x.ToString())).First().ToString();
    }

    private bool isIdExist(string value)
    {
        return userList.Any(user => user.ID == value);
    }

    private void ClearFields()
    {
        userID = userName = userEmail = userAddress = String.Empty;

    }

    protected override async Task OnParametersSetAsync()
    {
        userList = (await ApiCaller.GetUsersAsync()).ToList();
    }
}
