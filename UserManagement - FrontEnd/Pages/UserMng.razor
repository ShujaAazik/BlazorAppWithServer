@page "/UserManagement"

<table>
    <tr>
        <td class="col-6">
            <table>
                <tr class="mb-1 row">
                    <td class="col-auto"><h2>Create User</h2></td>
                </tr>
                <tr class="mb-3 row">
                    <td class="col-sm-3 col-form-label">Name</td>
                    <td class="col-sm-9"><input type="text" @bind="userName" class="form-control"></td>
                </tr>
                <tr class="mb-3 row">
                    <td class="col-sm-3 col-form-label">Address</td>
                    <td class="col-sm-9"><input type="text" @bind="userAddress" class="form-control"></td>
                </tr>
                <tr class="mb-3 row">
                    <td class="col-sm-3 col-form-label">Email</td>
                    <td class="col-sm-9"><input type="text" @bind="userEmail" class="form-control"></td>
                </tr>
                <tr class="mb-2 row">
                    <td class="col-auto"><button class="btn btn-primary" @onclick="AddUser">Add User</button></td>
                </tr>
            </table>
        </td>
        <td class="col-6">
            <table>
                <tr class="mb-1 row">
                    <td class="col-auto"><h2>Update User</h2></td>
                </tr>
                <tr class="mb-1 row">
                    <td class="col-sm-3 col-form-label">No</td>
                    <td class="col-sm-9">
                        <EditForm Model="@user">
                            @if (userList.Any())
                            {
                                <InputSelect @bind-Value="txtUserId" @onchange="offDisable" class="form-control">
                                    user = userList.First(offset => offset.ID == txtUserId);
                                    @foreach (var user in userList)
                                    {
                                    <option value="@user.UserId.ToString()">@user.Name</option>
                                    }
                                </InputSelect>
                            }
                        </EditForm>
                    </td>
                </tr>
                <tr class="mb-1 row">
                    <td class="col-sm-3 col-form-label">Name</td>
                    <td class="col-sm-9"><input type="text" class="form-control" @bind="user.Name" disabled="@isDisable"></td>
                </tr>
                <tr class="mb-1 row">
                    <td class="col-sm-3 col-form-label">Address</td>
                    <td class="col-sm-9"><input type="text" class="form-control" @bind="user.Address" disabled="@isDisable"></td>
                </tr>
                <tr class="mb-1 row">
                    <td class="col-sm-3 col-form-label">Email</td>
                    <td class="col-sm-9"><input type="text" class="form-control" @bind="user.Email" disabled="@isDisable"></td>
                </tr>
                <tr class="mb-1 row justify-content-center">
                    <td class="col-6"><button class="btn btn-primary" @onclick="UpdateUser">Update User</button></td>
                    <td class="col-6"><button class="btn btn-primary" @onclick="RemoveUser">Delete User</button></td>
                </tr>
            </table>
        </td>
    </tr>
    <tr>
        <td>
            <table>
                <tr>
                    <td><h2>Read User</h2></td>
                </tr>
                <tr>
                    <td>
                        @if (userList.Any())
                        {
                            <ul>
                                @foreach (var user in userList)
                                {
                                    <li>@user.UserId &emsp; @user.Name &emsp; @user.Address &emsp; @user.Email</li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p>The List is Empty</p>
                        }
                    </td>
                </tr>
                <tr>
                    <td><button class="btn btn-primary" @onclick="ReadUser">Read User</button></td>
                </tr>
            </table>
        </td>
    </tr>
</table>




@code {

    private string txtUserId { get; set; }
    private string userName { get; set; }
    private string userAddress { get; set; }
    private string userEmail { get; set; }

    private List<User> userList = new();

    private User user = new();

    private bool isDisable { get; set; } = true;

    private void offDisable()
    {
        this.isDisable = false;
    }

    private async Task AddUser()
    {
        if (userAddress != null && userEmail != null && userName != null)
        {
            await UserRepositoryAPI.AddUserAsync(new User { Name = userName, Email = userEmail, Address = userAddress });

            ClearFields();
        }
    }

    private async Task ReadUser()
    {
        userList = (await UserRepositoryAPI.GetUsersAsync()).OrderBy(offset => offset.UserId).ToList();
    }

    private async Task UpdateUser()
    {
        if (isIdExist(Int32.Parse(txtUserId)))
        {

            await UserRepositoryAPI.UpdateUserAsync(user);

            userList = (await UserRepositoryAPI.GetUsersAsync()).ToList();

            ClearFields();
        }
    }

    private async Task RemoveUser()
    {
        if (isIdExist(Int32.Parse(txtUserId)))
        {
            await UserRepositoryAPI.DeleteUserAsync(Int32.Parse(txtUserId));

            ClearFields();
        }
    }

    private bool isIdExist(int value)
    {
        if (userList.Any())
        {
            return userList.Any(user => user.UserId == value);
        }

        return false;
    }

    private void ClearFields()
    {
        txtUserId = txtUserId = userName = userEmail = userAddress = String.Empty;
    }

    protected override async void OnInitialized()
    {
       userList = (await UserRepositoryAPI.GetUsersAsync()).OrderBy(offset => offset.UserId).ToList();
    }


}
