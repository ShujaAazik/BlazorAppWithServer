@page "/UserManagement"

<table>
    <tr>
        <td>
            <h1>
                User
            </h1>
        </td>
    </tr>
    <tr>
        <td>
            <table>
                <tr>
                    <td><h2>Create User</h2></td>
                </tr>
                <tr>
                    <td>Name:</td>
                    <td><input type="text" @bind="userName"></td>
                </tr>
                <tr>
                    <td>Address:</td>
                    <td><input type="text" @bind="userAddress"></td>
                </tr>
                <tr>
                    <td>Email:</td>
                    <td><input type="text" @bind="userEmail"></td>
                </tr>
                <tr>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
                <tr>
                    <td><button class="btn btn-primary" @onclick="AddUser">Add User</button></td>
                </tr>
            </table>
        </td>
        <td>
            <table>
                <tr>
                    <td><h2>Update User</h2></td>
                </tr>
                <tr>
                    <td>No:</td>
                    <td><input type="text" @bind="txtUpdateId"></td>
                </tr>
                @if (Int32.TryParse(txtUpdateId, out Int32 userID) && isIdExist(userID))
                {
                    user = userList.First(offset => offset.UserId == userID);
                    <tr>
                        <td>Name:</td>
                        <td><input type="text" @bind="user.Name"></td>
                    </tr>
                    <tr>
                        <td>Address:</td>
                        <td><input type="text" @bind="user.Address"></td>
                    </tr>
                    <tr>
                        <td>Email:</td>
                        <td><input type="text" @bind="user.Email"></td>
                    </tr>
                }
                <tr>
                    <td><button class="btn btn-primary" @onclick="UpdateUser">Update User</button></td>
                </tr>
            </table>
        </td>
    </tr>
    <tr>
        <td>
            <table>
                <tr>
                    <td><h2>Read User</h2></td>
                </tr>
                <tr>
                    <td>
                        @if (userList.Any())
                        {
                            <ul>
                                @foreach (var user in userList)
                                {
                                    <li>@user.UserId &emsp; @user.Name &emsp; @user.Address &emsp; @user.Email</li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p>The List is Empty</p>
                        }
                    </td>
                </tr>
                <tr>
                    <td><button class="btn btn-primary" @onclick="ReadUser">Read User</button></td>
                </tr>
            </table>
        </td>
    </tr>
    <tr>
        <td>
            <table>
                <tr>
                    <td><h2>Delete User</h2></td>
                </tr>
                <tr>
                    <td>No:</td>
                    <td><input type="text" @bind="txtDeleteId"></td>
                </tr>
                <tr>
                    <td><button class="btn btn-primary" @onclick="RemoveUser">Delete User</button></td>
                </tr>
            </table>
        </td>
    </tr>
</table>




@code {

    private string txtUpdateId { get; set; }
    private string txtDeleteId { get; set; }
    private string userName { get; set; }
    private string userAddress { get; set; }
    private string userEmail { get; set; }

    private List<User> userList = new();

    private User user = new();

    private async Task AddUser()
    {
        if (userAddress != null && userEmail != null && userName != null)
        {
            await UserRepositoryAPI.AddUserAsync(new User { Name = userName, Email = userEmail, Address = userAddress });

            ClearFields();
        }
    }

    private async Task ReadUser()
    {
        userList = (await UserRepositoryAPI.GetUsersAsync()).OrderBy(offset=>offset.UserId).ToList();
    }

    private async Task UpdateUser()
    {
        if (isIdExist(Int32.Parse(txtUpdateId)))
        {

            await UserRepositoryAPI.UpdateUserAsync(user);

            userList = (await UserRepositoryAPI.GetUsersAsync()).ToList();

            ClearFields();
        }
    }

    private async Task RemoveUser()
    {
        if (isIdExist(Int32.Parse(txtDeleteId)))
        {
            await UserRepositoryAPI.DeleteUserAsync(Int32.Parse(txtDeleteId));

            ClearFields();
        }
    }

    private bool isIdExist(int value)
    {
        if (userList.Any())
        {
            return userList.Any(user => user.UserId == value);
        }

        return false;
    }

    private void ClearFields()
    {
        txtUpdateId = txtDeleteId = userName = userEmail = userAddress = String.Empty;
    }

    protected override async void OnInitialized()
    {
        ReadUser();
    }


}
