@page "/ContractConfig"
@using UserManagement___FrontEnd.Components
@inject NavigationManager navigationManager

<div class="row m-3 col-auto">
    <div class="form-group">
    <select @bind="config.ContractId" class="form-control-sm">
        <option value="0">----Select Contract----</option>
        @foreach (var contract in contractConfigVM.contracts)
        {
            <option value="@contract.ContractId">@contract.Name</option>
        }
    </select>
    <input type="text" @bind="config.Code" placeholder="Search Code" class="form-control-sm" />
    <input type="text" @bind="config.Description" placeholder="Search Description" class="form-control-sm" />
    <select @bind="config.DataFormatId" class="form-control-sm">
        <option value="0">----Select User Id----</option>
        @foreach (var type in contractConfigVM.dataFormats)
        {
            <option value="@type.DataFormatId">@type.Name</option>
        }
    </select>
    <button @onclick="@SearchText" class="btn btn-primary">Search</button></div>
</div>

<div class="row m-3 col-6">
    @if (contractConfigVM.configList.Any())
    {
        <table class="table table-md table-striped table-bordered">
            <tr>
                <th>Id</th>
                <th>Contract</th>
                <th>Code</th>
                <th>Value</th>
                <th>Description</th>
                <th>Type</th>
            </tr>
            @foreach (var config in contractConfigVM.configList)
            {
                <tr>
                    <td>@config.ContractConfigId</td>
                    <td>@contractConfigVM.contracts.First(offset=> offset.ContractId == config.ContractId).Name</td>
                    <td>@config.Code</td>
                    <td>@config.Value</td>
                    <td>@config.Description</td>
                    <td>@config.DataFormat.Name</td>
                    <td><button @onclick="@(()=>navigationManager.NavigateTo($"UpdateConfig/{config.ContractConfigId}"))" class="btn btn-primary"><i class="oi oi-pencil" /></button></td>
                    <td><button @onclick="@(()=>navigationManager.NavigateTo($"ConfirmationPrompt/{config.ContractConfigId}"))" class="btn btn-primary"><i class="oi oi-trash" /></button></td>
                </tr>
            }
        </table>
    }
    else
    {
        <p>The List is Empty</p>
    }
</div>

<div class="row m-3 col-6">
    <div>
        <button @onclick="@(() => navigationManager.NavigateTo("AddconfigForm"))" class="btn btn-primary btn-circle"><i class="oi oi-plus" /></button>
    </div>
</div>

@code {

    ContractConfigVM contractConfigVM = new();

    ContractConfiguration config = new();

    protected override async Task OnInitializedAsync()
    {
        contractConfigVM.dataFormats = (await ContConfigRepositoryAPI.GetDataFormatAsync()).OrderBy(offset => offset.DataFormatId).ToList();

        contractConfigVM.configList = (await ContConfigRepositoryAPI.GetContConfigAsync()).OrderBy(offset => offset.ContractConfigId).ToList();

        contractConfigVM.contracts = KTRepositoryAPI.GetContractsAsync().ToList();
    }

    protected async Task SearchText()
    {
        contractConfigVM.configList = FilterCode(contractConfigVM.configList, config.Code);
        contractConfigVM.configList = FilterContractId(contractConfigVM.configList, config.ContractId);
        contractConfigVM.configList = FilterDescription(contractConfigVM.configList, config.Description);
        contractConfigVM.configList = FilterDataFormatId(contractConfigVM.configList, config.DataFormatId);
    }

    private static List<ContractConfiguration> FilterCode(List<ContractConfiguration> contractConfigurations, string Code)
    {
        if (string.IsNullOrEmpty(Code))
        {
            return contractConfigurations;
        }

        return contractConfigurations.Where(x => x.Code.StartsWith(Code)).ToList();
    }

    private static List<ContractConfiguration> FilterDescription(List<ContractConfiguration> contractConfigurations, string Description)
    {
        if (string.IsNullOrEmpty(Description))
        {
            return contractConfigurations;
        }

        return contractConfigurations.Where(x => x.Description.StartsWith(Description)).ToList();
    }

    private static List<ContractConfiguration> FilterContractId(List<ContractConfiguration> contractConfigurations, int ContractId)
    {
        if (ContractId == 0)
        {
            return contractConfigurations;
        }

        return contractConfigurations.Where(x => x.ContractId.Equals(ContractId)).ToList();
    }

    private static List<ContractConfiguration> FilterDataFormatId(List<ContractConfiguration> contractConfigurations, int DataFormatId)
    {
        if (DataFormatId == 0)
        {
            return contractConfigurations;
        }

        return contractConfigurations.Where(x => x.DataFormatId.Equals(DataFormatId)).ToList();
    }
}
