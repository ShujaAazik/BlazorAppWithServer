@page "/ContractConfig"

<div class="row">
    <div class="col-5 mx-auto">
        <EditForm Model="@addConfig" OnValidSubmit="@AddContractConfig">
            <DataAnnotationsValidator />
            <h3>Add Configuration</h3>
            <div class="row p-3">
                <label class="col-sm-3 col-form-label">Contract ID</label>
                <InputSelect @bind-Value="addConfig.ContractId" class="col-sm-5 form-control">
                    <option value="0">----Select Contract----</option>
                    @foreach (var contract in contracts)
                    {
                        <option value="@contract.ContractId">@contract.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(()=>addConfig.ContractId)" class="col-4" />
            </div>
            <div class="row p-3">
                <label class="col-sm-3 col-form-label">Code</label>
                <InputText @bind-Value="addConfig.Code" class="col-sm-5 form-control" />
                <ValidationMessage For="@(()=>addConfig.Code)" class="col-4" />
            </div>
            <div class="row p-3">
                <label class="col-sm-3 col-form-label">Value</label>
                <InputText @bind-Value="addConfig.Value" class="col-sm-5 form-control" />
                <ValidationMessage For="@(()=>addConfig.Value)" class="col-4" />
            </div>
            <div class="row p-3">
                <label class="col-sm-3 col-form-label">Description</label>
                <InputText @bind-Value="addConfig.Description" class="col-sm-5 form-control" />
                <ValidationMessage For="@(()=>addConfig.Description)" class="col-4" />
            </div>
            <div class="row p-3">
                <label class="col-sm-3 col-form-label">Type</label>
                <InputSelect Value="@addConfig.DataFormatId" ValueExpression="@(() => addConfig.DataFormatId)" ValueChanged="@((int value)=>AddDataFormatModel(value))" class="col-sm-5 form-control">
                    <option value="0">----Select User Id----</option>
                    @foreach (var type in dataFormats)
                    {
                        <option value="@type.DataFormatId">@type.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(()=>addConfig.DataFormatId)" class="col-4" />
            </div>
            <div class="row py-lg-3 my-4"></div>
            <div class="row mx-auto">
                <div class="col-5"><button class="btn btn-primary px-5">Add Config</button></div>

            </div>
        </EditForm>
    </div>
    <div class="col-5 mx-auto">
        <EditForm  Model="@updateConfig" OnValidSubmit="@UpdateContractConfig">
            <DataAnnotationsValidator />
            <h3>Update Configuration</h3>
            <div class="row p-3">
                <label class="col-sm-3 col-form-label">Contact Config</label>
                <InputSelect Value="@updateConfig.ContractConfigId" ValueExpression="@(()=>updateConfig.ContractConfigId)" ValueChanged="@((int value)=>UpdateContractConfigModel(value))" class="col-sm-5 form-control">
                    <option value="0">-----Select Contact-----</option>
                    @foreach (var contract in configList)
                    {
                        <option value="@contract.ContractConfigId">@contract.Code</option>
                    }
                </InputSelect>
            </div>
            <div class="row p-3">
                <label class="col-sm-3 col-form-label">Contract ID</label>
                <InputSelect @bind-Value="updateConfig.ContractId" class="col-sm-5 form-control">
                    <option value="0">----Select Contract----</option>
                    @foreach (var contract in contracts)
                    {
                        <option value="@contract.ContractId">@contract.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(()=>updateConfig.ContractId)" class="col-4" />
            </div>
            <div class="row p-3">
                <label class="col-sm-3 col-form-label">Code</label>
                <InputText @bind-Value="updateConfig.Code" class="col-sm-5 form-control" />
                <ValidationMessage For="@(()=>updateConfig.Code)" class="col-4" />
            </div>
            <div class="row p-3">
                <label class="col-sm-3 col-form-label">Value</label>
                <InputText @bind-Value="updateConfig.Value" class="col-sm-5 form-control" />
                <ValidationMessage For="@(()=>updateConfig.Value)" class="col-4" />
            </div>
            <div class="row p-3">
                <label class="col-sm-3 col-form-label">Description</label>
                <InputText @bind-Value="updateConfig.Description" class="col-sm-5 form-control" />
                <ValidationMessage For="@(()=>updateConfig.Description)" class="col-4" />
            </div>
            <div class="row p-3">
                <label class="col-sm-3 col-form-label">Type</label>
                <InputSelect Value="updateConfig.DataFormatId" ValueExpression="(()=> updateConfig.DataFormatId)" ValueChanged="(int value) => UpdateDataFormatModel(value)" class="col-sm-5 form-control">
                    <option value="0">----Select User Id----</option>
                    @foreach (var type in dataFormats)
                    {
                        <option value="@type.DataFormatId">@type.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(()=>updateConfig.DataFormatId)" class="col-4" />
            </div>
            <div class="row p-3 mx-auto">
                <div class="col-5"><button class="btn btn-primary px-5">Update Config</button></div>
                <div class="col-4"><button class="btn btn-primary px-3" @onclick="RemoveContractConfig">Remove Config</button></div>
            </div>
        </EditForm>
    </div>
</div>
<div class="row m-3 col-6">
    @if (configList.Any())
    {
        <table class="table table-md table-striped table-bordered">
            <tr><th>Id</th><th>ContractId</th><th>Code</th><th>Value</th><th>Description</th><th>Type</th></tr>
            @foreach (var config in configList)
            {
                <tr><td>@config.ContractConfigId</td><td>@contracts.First(offset=> offset.ContractId == config.ContractId).Name</td><td>@config.Code</td><td>@config.Value</td><td>@config.Description</td><td>@config.DataFormat.Name</td></tr>
            }
        </table>
    }
    else
    {
        <p>The List is Empty</p>
    }
</div>

@code {

    private ContractConfiguration addConfig = new();

    private ContractConfiguration updateConfig = new();

    private List<ContractConfiguration> configList = new();

    private List<DataFormat> dataFormats = new();

    private List<Contract> contracts = new();

    protected override async Task OnInitializedAsync()
    {
        dataFormats = (await ContConfigRepositoryAPI.GetDataFormatAsync()).OrderBy(offset => offset.DataFormatId).ToList();

        configList = (await ContConfigRepositoryAPI.GetContConfigAsync()).OrderBy(offset => offset.ContractConfigId).ToList();

        contracts = KTRepositoryAPI.GetContractsAsync().ToList();
    }

    protected async Task AddContractConfig()
    {
        await ContConfigRepositoryAPI.AddContConfigAsync(addConfig);

        addConfig = new();

        configList = (await ContConfigRepositoryAPI.GetContConfigAsync()).OrderBy(offset => offset.ContractConfigId).ToList();
    }

    protected void UpdateContractConfigModel(int value)
    {
        updateConfig = configList.First(offset => offset.ContractConfigId == value);
    }

    protected void UpdateDataFormatModel(int value)
    {
        updateConfig.DataFormatId = value;
        updateConfig.DataFormat = dataFormats.First(offset => offset.DataFormatId == value);
    }

    protected void AddDataFormatModel(int value)
    {
        addConfig.DataFormatId = value;
        addConfig.DataFormat = dataFormats.First(offset => offset.DataFormatId == value);
    }

    protected async Task UpdateContractConfig()
    {

        await ContConfigRepositoryAPI.UpdateContConfigAsync(updateConfig);

        updateConfig = new();

        configList = (await ContConfigRepositoryAPI.GetContConfigAsync()).OrderBy(offset => offset.ContractConfigId).ToList();
    }

    protected async Task RemoveContractConfig()
    {

        await ContConfigRepositoryAPI.DeleteContConfigAsync(updateConfig.ContractConfigId);

        updateConfig = new();

        configList = (await ContConfigRepositoryAPI.GetContConfigAsync()).OrderBy(offset => offset.ContractConfigId).ToList();
    }
}
