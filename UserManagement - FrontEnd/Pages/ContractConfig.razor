@page "/ContractConfig"
@using UserManagement___FrontEnd.Components
@inject IConfiguration Configuration
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components.Web
@using Newtonsoft.Json
@using UserManagement___FrontEnd.Model
@using UserManagement___FrontEnd.View_Models

<div>
    <div class="modal fade" id="ErrorModal" tabindex="-1" role="dialog" aria-labelledby="headerModal" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-danger" id="headerModal">Error Occured</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body text-danger">
                    <p>@message</p>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row m-3 col-auto">
    <div class="form-group">
        <select @bind="contractConfigVM.search.ContractId" class="form-control-sm">
            <option>----Select Contract----</option>
            @foreach (var contract in contractConfigVM.contracts)
            {
                <option value="@contract.ID">@contract.Name</option>
            }
        </select>
        <input type="text" @bind="contractConfigVM.search.Code" placeholder="Search Code" class="form-control-sm" />
        <input type="text" @bind="contractConfigVM.search.Description" placeholder="Search Description" class="form-control-sm" />
        <select @bind="contractConfigVM.search.DataFormatId" class="form-control-sm">
            <option value="0">----Select Format Type----</option>
            @foreach (var type in contractConfigVM.dataFormats)
            {
                <option value="@type.DataFormatId">@type.Name</option>
            }
        </select>
        <button @onclick="@SearchText" class="btn btn-primary">Search</button>
    </div>
</div>

<div class="row m-3 col-6">
    @if (contractConfigVM.configList.Any())
    {
        <table id="contractConfigTable" class="display" style="width:100%">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Contract</th>
                    <th>Code</th>
                    <th>Value</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Edit</th>
                    <th>Remove</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var config in contractConfigVM.configList)
                {
                    <tr>
                        <td>@config.ContractConfigId</td>
                        <td>
                            @if (contractConfigVM.contracts.Any(contract => contract.ID == config.ContractId))
                            {
                                @contractConfigVM.contracts.First(offset=>config.ContractId == offset.ID).Name
                            }
                            else
                            {
                                @config.ContractConfigId;
                            }

                        </td>
                        <td>@config.Code</td>
                        <td>@config.Value</td>
                        <td>@config.Description</td>
                        <td>@config.DataFormat.Name</td>
                        <td><button @onclick="@(()=>navigationManager.NavigateTo($"UpdateConfig/{config.ContractConfigId}"))" class="btn btn-primary"><i class="oi oi-pencil" /></button></td>
                        <td><button @onclick="@(()=>navigationManager.NavigateTo($"ConfirmationPrompt/{config.ContractConfigId}"))" class="btn btn-primary"><i class="oi oi-trash" /></button></td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>The List is Empty</p>
    }
</div>

<div class="row m-3 col-6">
    <div>
        <button @onclick="@(() => navigationManager.NavigateTo("AddconfigForm"))" class="btn btn-primary btn-circle"><i class="oi oi-plus" /></button>
    </div>
</div>


@code {

    private ContractConfigListVM contractConfigVM = new();

    private ContConfigRepositoryAPI contConfigRepositoryAPI;

    private ContractRepositoryAPI contractRepositoryAPI;

    private ContractConfigRM configListResponse;

    private ContractConfigRM dataFormatListResponse;

    private ContractConfigRM contractResponse;

    private string? message;

    protected override async Task OnInitializedAsync()
    {
        contConfigRepositoryAPI = new(Configuration);

        contractRepositoryAPI = new(Configuration);

        configListResponse = await contConfigRepositoryAPI.GetContConfigAsync();

        dataFormatListResponse = await contConfigRepositoryAPI.GetDataFormatAsync();

        contractResponse = await contractRepositoryAPI.GetContractsAsync();
    }

    protected override void OnParametersSet()
    {
        ValidateApiResponse<ContractConfiguration>(configListResponse, ref contractConfigVM.configList);

        ValidateApiResponse<DataFormat>(dataFormatListResponse, ref contractConfigVM.dataFormats);

        ValidateApiResponse<Contract>(contractResponse, ref contractConfigVM.contracts);

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeAsync<object>("DataTablesAdd", "#contractConfigTable");
    }

    protected async Task SearchText()
    {
        ValidateApiResponse<ContractConfiguration>((await contConfigRepositoryAPI.GetFilteredContConfigAsync(contractConfigVM.search)), ref contractConfigVM.configList);
    }

    private void ValidateApiResponse<T>(ContractConfigRM contractConfigRM, ref List<T> content)
    {
        try
        {
            if (contractConfigRM.Succeeded)
            {
                content = JsonConvert.DeserializeObject<List<T>>(contractConfigRM.Content)
                                            .ToList();
            }
            else
            {
                message = contractConfigRM.Message;
                JSRuntime.InvokeAsync<object>("ShowErrorMessage", "#ErrorModal");
            }
        }
        catch (Exception e)
        {
            message = e.Message;
            JSRuntime.InvokeAsync<object>("ShowErrorMessage", "#ErrorModal");
        }
    }
}
