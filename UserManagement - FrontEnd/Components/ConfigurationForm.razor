@page "/AddconfigForm"
@page "/UpdateConfig/{ContractConfigId:int}"
@inject IConfiguration Configuration
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime
@using Newtonsoft.Json
@using UserManagement___FrontEnd.Model
@using UserManagement___FrontEnd.View_Models
    

<EditForm Model="@ConfigVM.config" OnValidSubmit="@SaveContractConfig">
    <DataAnnotationsValidator />
    <h3>@Heading</h3>
    <div class="col-6">
        <div class="row p-3">
            <label class="col-sm-3 col-form-label">Contract ID</label>
            <InputSelect @bind-Value="ConfigVM.config.ContractId" class="col-sm-5 form-control">
                <option value="-1" >----Select Contract----</option>
                @foreach (var contract in ConfigVM.contracts)
                {
                    <option value="@contract.ID">@contract.Name</option>
                }
            </InputSelect>
            <ValidationMessage For="@(()=>ConfigVM.config.ContractId)" class="col-4" />
        </div>
        <div class="row p-3">
            <label class="col-sm-3 col-form-label">Code</label>
            <InputText @bind-Value="ConfigVM.config.Code" class="col-sm-5 form-control" />
            <ValidationMessage For="@(()=>ConfigVM.config.Code)" class="col-4" />
        </div>
        <div class="row p-3">
            <label class="col-sm-3 col-form-label">Type</label>
            <InputSelect Value="@ConfigVM.config.DataFormatId" ValueExpression="@(() => ConfigVM.config.DataFormatId)" ValueChanged="@((int value)=>AddDataFormatModel(value))" class="col-sm-5 form-control">
                <option value="0">----Select Format Type----</option>
                @foreach (var type in ConfigVM.dataFormats)
                {
                    <option value="@type.DataFormatId">@type.Name</option>
                }
            </InputSelect>
            <ValidationMessage For="@(()=>ConfigVM.config.DataFormatId)" class="col-4" />
        </div>
        <div class="row p-3">
            @if (ConfigVM.config.DataFormatId > 0)
            {
                switch (ConfigVM.config.DataFormat.Name)
                {
                    case "String":
                        <label class="col-sm-3 col-form-label">Value</label>
                        <InputText @bind-Value="ConfigVM.config.Value" class="col-sm-5 form-control" />
                        <ValidationMessage For="@(()=>ConfigVM.config.Value)" class="col-4" />
                        break;
                    case "CodeWord":
                        <label class="col-sm-3 col-form-label">Value</label>
                        <InputText @bind-Value="ConfigVM.config.Value" class="col-sm-5 form-control" />
                        <ValidationMessage For="@(()=>ConfigVM.config.Value)" class="col-4" />
                        break;
                    case "Number":
                        <label class="col-sm-3 col-form-label">Value</label>
                        <InputNumber @bind-Value="contactId" onchange="@AddTypeModel(contactId)" class="col-sm-5 form-control" />
                        <ValidationMessage For="@(()=>ConfigVM.config.Value)" class="col-4" />
                        break;
                    case "JSON":
                        <label class="col-sm-3 col-form-label">Value</label>
                        <InputTextArea @bind-Value="ConfigVM.config.Value" class="col-sm-5 form-control" rows="3" />
                        <ValidationMessage For="@(()=>ConfigVM.config.Value)" class="col-4" />
                        break;
                    case "SQLQuery":
                        <label class="col-sm-3 col-form-label">Value</label>
                        <InputTextArea @bind-Value="ConfigVM.config.Value" class="col-sm-5 form-control" rows="3" />
                        <ValidationMessage For="@(()=>ConfigVM.config.Value)" class="col-4" />
                        break;
                    default:
                        break;
                }
            }
        </div>
        <div class="row p-3">
            <label class="col-sm-3 col-form-label">Description</label>
            <InputText @bind-Value="ConfigVM.config.Description" class="col-sm-5 form-control" />
            <ValidationMessage For="@(()=>ConfigVM.config.Description)" class="col-4" />
        </div>
        <div class="row py-lg-3 my-4"></div>
        <div class="row mx-auto">
            <div class="col-5"><button class="btn btn-primary px-5">Save Config</button></div>
            <button @onclick="@(()=>navigationManager.NavigateTo("ContractConfig"))" class="btn btn-primary">Go Back</button>
        </div>

        <div>
            <div class="modal fade" id="ErrorModal" tabindex="-1" role="dialog" aria-labelledby="headerModal" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title text-danger" id="headerModal">Error Occured</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body text-danger">
                            <p>@response?.Message</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
</EditForm>

@code {

    public ContractConfigListVM ConfigVM = new();

    public ContConfigRepositoryAPI contConfigRepositoryAPI;

    public ContractRepositoryAPI contractRepositoryAPI;

    private ContractConfigRM response;

    //private ContractConfigRM contractResponse;

    [Parameter]
    public int contractConfigId { get; set; }

    int contactId;

    string Heading = "Add Configuration";

    protected override async Task OnInitializedAsync()
    {
        contConfigRepositoryAPI = new(Configuration);

        contractRepositoryAPI = new(Configuration);

        ConfigVM.configList = JsonConvert.DeserializeObject<List<ContractConfiguration>>((await contConfigRepositoryAPI.GetContConfigAsync()).Content).OrderBy(offset => offset.ContractConfigId).ToList();

        ConfigVM.dataFormats = JsonConvert.DeserializeObject<List<DataFormat>>((await contConfigRepositoryAPI.GetDataFormatAsync()).Content).OrderBy(offset => offset.DataFormatId).ToList();

        ConfigVM.contracts = JsonConvert.DeserializeObject<List<Contract>>((await contractRepositoryAPI.GetContractsAsync()).Content);
    }

    protected override void OnParametersSet()
    {
        UpdateContractConfigModel();
    }

    protected int AddTypeModel(int value)
    {
        ConfigVM.config.Value = String.Format("{0}", value);
        return value;
    }

    protected void UpdateContractConfigModel()
    {
        if (contractConfigId > 0)
        {
            Heading = "Update Configuration";
            ConfigVM.config = ConfigVM.configList.First(offset => offset.ContractConfigId == contractConfigId);
        }
    }

    protected void AddDataFormatModel(int value)
    {
        ConfigVM.config.DataFormatId = value;
        ConfigVM.config.DataFormat = ConfigVM.dataFormats.First(offset => offset.DataFormatId == value);
    }

    protected async Task SaveContractConfig()
    {

        if (contractConfigId > 0)
        {
            response = await contConfigRepositoryAPI.UpdateContConfigAsync(ConfigVM.config);
        }
        else
        {
            response = await contConfigRepositoryAPI.AddContConfigAsync(ConfigVM.config);
        }

        await ValidateApiResponse(response);
    }

    private async Task ValidateApiResponse(ContractConfigRM contractConfigRM)
    {
        if (contractConfigRM.Succeeded)
        {
            ConfigVM.config = ConfigVM.RefreshConfig(ConfigVM.config);

            navigationManager.NavigateTo("ContractConfig");
        }
        else
        {
            await JSRuntime.InvokeAsync<object>("ShowErrorMessage", "#ErrorModal");
        }
    }
}
