@page "/ConfirmationPrompt/{ContractConfigId:int}"
@inject NavigationManager navigationManager
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime

<div>
    <p>Are you sure you want to delete the record?</p>

    <button @onclick="Yes" class="btn btn-outline-danger">Yes</button>
    <button @onclick="No" class="btn btn-primary">No</button>
</div>

<div>
    <div class="modal fade" id="ErrorModal" tabindex="-1" role="dialog" aria-labelledby="headerModal" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-danger" id="headerModal">Error Occured</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body text-danger">
                    <p>@response?.Message</p>
                </div>
            </div>
        </div>
    </div>
</div>



@code {

    [Parameter]
    public int contractConfigId { get; set; }

    private ContConfigRepositoryAPI contConfigRepositoryAPI;

    private ContractConfigRM response;

    protected override void OnInitialized()
    {
        contConfigRepositoryAPI = new(Configuration);
    }

    protected async Task Yes()
    {
        response = await contConfigRepositoryAPI.DeleteContConfigAsync(contractConfigId);

        if (response.Succeeded)
        {
            navigationManager.NavigateTo("ContractConfig");
        }
        else
        {
            await JSRuntime.InvokeAsync<object>("ShowErrorMessage", "#ErrorModal");
        }
    }

    protected void No() => navigationManager.NavigateTo("ContractConfig");
}
